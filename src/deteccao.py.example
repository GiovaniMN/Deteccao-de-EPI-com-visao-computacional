# src/deteccao.py
# Copie este arquivo para deteccao.py e preencha com suas credenciais e caminhos corretos.
# Ou configure usando vari√°veis de ambiente.

import cv2
import pandas as pd
import numpy as np
from ultralytics import YOLO
import cvzone
import time
from collections import defaultdict
from threading import Thread
import firebase_admin
from firebase_admin import credentials, firestore
import base64
from io import BytesIO
from datetime import datetime
import requests
import os

# --- Configura√ß√µes ---
# Firebase
FIREBASE_KEY_PATH = os.getenv('FIREBASE_KEY_PATH', '../config/firebase_key.json') # Caminho para sua chave Firebase

# Telegram
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_TELEGRAM_CHAT_ID')

# Modelo YOLO
MODEL_PATH = os.getenv('MODEL_PATH', '../models/yolov8n_full_integer_quant_edgetpu.tflite') # ou '../models/yolov8n.pt'
CLASSES_PATH = os.getenv('CLASSES_PATH', '../models/classes.txt')

# Configura√ß√µes de Detec√ß√£o
VIDEO_SOURCE = int(os.getenv('VIDEO_SOURCE', 0)) # 0 para webcam, ou caminho para arquivo de v√≠deo
CONFIDENCE_THRESHOLD = float(os.getenv('CONFIDENCE_THRESHOLD', 0.3))
FRAME_SKIP = int(os.getenv('FRAME_SKIP', 6)) # Processar 1 a cada N frames
ALERT_DURATION_SECONDS = int(os.getenv('ALERT_DURATION_SECONDS', 3)) # Segundos de aus√™ncia para gerar alerta
ALERT_COOLDOWN_SECONDS = int(os.getenv('ALERT_COOLDOWN_SECONDS', 60)) # Tempo m√≠nimo entre alertas para a mesma combina√ß√£o

# EPIs a serem monitorados
EPIS_MONITORADOS = ['capacete', 'oculos', 'bota']

# Cores para as classes (BGR)
CORES_POR_CLASSE = {
    'pessoa': (0, 255, 0),     # Verde
    'capacete': (255, 0, 0),   # Azul
    'bota': (0, 128, 255),     # Laranja
    'oculos': (128, 0, 128)    # Roxo
    # Adicione mais classes e cores se necess√°rio
}
# --- Fim das Configura√ß√µes ---

# --- Fun√ß√µes Auxiliares ---
def initialize_firebase():
    """Inicializa a conex√£o com o Firebase."""
    try:
        cred = credentials.Certificate(FIREBASE_KEY_PATH)
        firebase_admin.initialize_app(cred)
        print("üî• Firebase inicializado com sucesso.")
        return firestore.client()
    except Exception as e:
        print(f"‚ùå Erro ao inicializar Firebase: {e}")
        print("Certifique-se de que o arquivo 'firebase_key.json' est√° no caminho correto e √© v√°lido.")
        return None

def enviar_notificacao_telegram(mensagem, imagem_buffer=None):
    """Envia mensagem de texto e opcionalmente uma imagem para o Telegram."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID or TELEGRAM_TOKEN == 'YOUR_TELEGRAM_TOKEN':
        print("‚ÑπÔ∏è Token ou Chat ID do Telegram n√£o configurados. Notifica√ß√£o n√£o enviada.")
        return

    try:
        # Envia mensagem de texto
        url_msg = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        params_msg = {'chat_id': TELEGRAM_CHAT_ID, 'text': mensagem}
        resposta_msg = requests.get(url_msg, params=params_msg, timeout=10)
        if resposta_msg.status_code == 200:
            print("üì© Mensagem enviada no Telegram com sucesso.")
        else:
            print(f"‚ö†Ô∏è Falha ao enviar mensagem no Telegram: {resposta_msg.status_code} - {resposta_msg.text}")

        # Envia imagem se fornecida
        if imagem_buffer:
            url_img = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            files = {'photo': ('alerta.jpg', imagem_buffer.tobytes(), 'image/jpeg')}
            data_img = {'chat_id': TELEGRAM_CHAT_ID, 'caption': mensagem} # Legenda pode ser a mesma mensagem
            resposta_img = requests.post(url_img, data=data_img, files=files, timeout=10)
            if resposta_img.status_code == 200:
                print("üñºÔ∏è Imagem enviada para o Telegram com sucesso.")
            else:
                print(f"‚ö†Ô∏è Falha ao enviar imagem no Telegram: {resposta_img.status_code} - {resposta_img.text}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o ao tentar enviar para o Telegram: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado ao enviar para o Telegram: {e}")


def enviar_alerta_firebase(db_client, imagem_cv2, mensagem):
    """Envia o alerta (mensagem e imagem) para o Firebase Firestore."""
    if db_client is None:
        print("‚ÑπÔ∏è Cliente Firestore n√£o inicializado. Alerta n√£o enviado para o Firebase.")
        return

    try:
        _, buffer = cv2.imencode('.jpg', imagem_cv2)
        img_base64 = base64.b64encode(buffer).decode('utf-8')

        alerta = {
            'mensagem': mensagem,
            'data_hora': datetime.now().isoformat(),
            'imagem_base64': img_base64  # Considere armazenar no Firebase Storage para imagens grandes
        }
        db_client.collection('alertas_epi').add(alerta)
        print(f"üö® Alerta enviado para Firebase: {mensagem}")
        return buffer # Retorna o buffer para poss√≠vel envio ao Telegram
    except Exception as e:
        print(f"‚ùå Erro ao enviar alerta para Firebase: {e}")
        return None

class VideoStream:
    """Classe para captura de v√≠deo em uma thread separada."""
    def __init__(self, src=0):
        self.cap = cv2.VideoCapture(src)
        if not self.cap.isOpened():
            print(f"‚ùå Erro ao abrir a fonte de v√≠deo: {src}")
            self.stopped = True
            self.ret = False
            self.frame = None
            return

        self.ret, self.frame = self.cap.read()
        self.stopped = False
        print(f"üìπ Fonte de v√≠deo '{src}' aberta com sucesso.")

    def start(self):
        if hasattr(self, 'stopped') and self.stopped: # Se falhou na inicializa√ß√£o
            return self
        Thread(target=self.update, args=(), daemon=True).start()
        return self

    def update(self):
        while not self.stopped:
            if self.cap.isOpened():
                ret, frame = self.cap.read()
                if ret:
                    self.ret, self.frame = ret, frame
                else:
                    # Se a leitura falhar (ex: fim de arquivo de v√≠deo), para a thread.
                    print("‚ö†Ô∏è Falha ao ler frame da fonte de v√≠deo. Parando stream.")
                    self.stop()
                    break
            else:
                # Se o cap n√£o estiver mais aberto por algum motivo
                print("‚ö†Ô∏è Fonte de v√≠deo n√£o est√° mais aberta. Parando stream.")
                self.stop()
                break
            time.sleep(0.01) # Pequena pausa para n√£o sobrecarregar CPU

    def read(self):
        return self.ret, self.frame

    def stop(self):
        self.stopped = True
        if hasattr(self, 'cap') and self.cap.isOpened():
            self.cap.release()
        print("üõë Stream de v√≠deo parado.")
# --- Fim das Fun√ß√µes Auxiliares ---

# --- Fun√ß√£o Principal ---
def main():
    """Fun√ß√£o principal para executar a detec√ß√£o de EPI."""
    db = initialize_firebase()

    # Inicializa modelo YOLO
    try:
        model = YOLO(MODEL_PATH, task='detect')
        print(f"üß† Modelo YOLO carregado de: {MODEL_PATH}")
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo YOLO: {e}")
        return

    # Carrega lista de classes
    try:
        with open(CLASSES_PATH, "r") as my_file:
            class_list = my_file.read().strip().split("\n")
        print(f"üìã Lista de classes carregada: {class_list}")
    except FileNotFoundError:
        print(f"‚ùå Arquivo de classes n√£o encontrado em: {CLASSES_PATH}")
        return
    except Exception as e:
        print(f"‚ùå Erro ao carregar arquivo de classes: {e}")
        return


    vs = VideoStream(src=VIDEO_SOURCE).start()
    if not vs.ret and vs.frame is None: # Verifica se o stream iniciou corretamente
        print("‚ùå Falha ao iniciar o stream de v√≠deo. Verifique a configura√ß√£o VIDEO_SOURCE.")
        return
    time.sleep(2.0) # D√° tempo para a c√¢mera/thread inicializar

    frame_count = 0
    start_time = time.time()
    total_inference_time = 0
    inference_frame_count = 0

    estado_epi = {epi: {'ausente_desde': None, 'presente': False, 'retorno_presenca': None} for epi in EPIS_MONITORADOS}
    ultimo_alerta_enviado = {'chave': '', 'timestamp': 0}

    print("\nüöÄ Iniciando loop de detec√ß√£o...")
    while True:
        ret, frame = vs.read()
        if not ret or frame is None:
            # Condi√ß√£o para sair se o stream parar (ex: fim de v√≠deo)
            if not vs.stopped: # Se o stream n√£o parou "graciosamente"
                 print("‚ö†Ô∏è Frame n√£o recebido, mas stream n√£o marcado como parado. Aguardando...")
                 time.sleep(0.5)
                 if not vs.ret and vs.frame is None and vs.stopped: # Verifica novamente se parou
                    print("Stream de v√≠deo terminou ou falhou.")
                    break
                 continue # Tenta ler novamente
            else: # Stream parado
                print("Stream de v√≠deo finalizado.")
                break


        frame_count += 1
        if frame_count % FRAME_SKIP != 0:
            continue

        # Redimensiona o frame para a entrada do modelo e realiza a predi√ß√£o
        # Nota: O tamanho (640,640) pode precisar ser ajustado dependendo do modelo
        resized_frame = cv2.resize(frame, (640, 480)) # Ajustado para 480 para manter propor√ß√£o comum
        inference_start = time.time()
        results = model.predict(resized_frame, conf=CONFIDENCE_THRESHOLD, verbose=False)
        inference_end = time.time()

        total_inference_time += (inference_end - inference_start)
        inference_frame_count += 1

        # Calcula fatores de escala para desenhar nos frames originais
        scale_x = frame.shape[1] / resized_frame.shape[1]
        scale_y = frame.shape[0] / resized_frame.shape[0]

        detected_objects_count = defaultdict(int)

        if results and results[0].boxes:
            px = results[0].boxes.data.cpu().numpy() # Mover para CPU e converter para numpy
            for det in px:
                x1_resized, y1_resized, x2_resized, y2_resized, conf, class_id_float = det
                class_id = int(class_id_float)

                if class_id < len(class_list):
                    detected_class_name = class_list[class_id]
                else:
                    detected_class_name = "desconhecido" # Lidar com IDs de classe fora do esperado

                # Converte coordenadas para o frame original
                x1 = int(x1_resized * scale_x)
                y1 = int(y1_resized * scale_y)
                x2 = int(x2_resized * scale_x)
                y2 = int(y2_resized * scale_y)

                cor = CORES_POR_CLASSE.get(detected_class_name, (200, 200, 200)) # Cinza para desconhecidos

                cv2.rectangle(frame, (x1, y1), (x2, y2), cor, 2)
                cvzone.putTextRect(
                    frame,
                    f'{detected_class_name} {conf:.2f}',
                    (x1, max(0, y1 - 10)), # Garante que o texto n√£o saia do topo
                    scale=0.7,
                    thickness=1,
                    colorR=cor,
                    colorT=(0, 0, 0) # Texto preto para melhor contraste
                )
                detected_objects_count[detected_class_name] += 1

        # L√≥gica de Alerta
        current_time = time.time()
        if detected_objects_count.get('pessoa', 0) > 0:
            epis_ausentes_confirmados = []

            for epi_name in EPIS_MONITORADOS:
                if detected_objects_count.get(epi_name, 0) == 0: # EPI n√£o detectado
                    if estado_epi[epi_name]['ausente_desde'] is None:
                        estado_epi[epi_name]['ausente_desde'] = current_time
                    estado_epi[epi_name]['retorno_presenca'] = None # Reseta se estava voltando
                    if (current_time - estado_epi[epi_name]['ausente_desde']) >= ALERT_DURATION_SECONDS:
                        estado_epi[epi_name]['presente'] = False
                else: # EPI detectado
                    if estado_epi[epi_name]['ausente_desde'] is not None: # Estava ausente
                        if estado_epi[epi_name]['retorno_presenca'] is None:
                            estado_epi[epi_name]['retorno_presenca'] = current_time
                        elif (current_time - estado_epi[epi_name]['retorno_presenca']) >= ALERT_DURATION_SECONDS:
                            estado_epi[epi_name]['presente'] = True
                            estado_epi[epi_name]['ausente_desde'] = None
                            estado_epi[epi_name]['retorno_presenca'] = None
                    else: # J√° estava presente
                        estado_epi[epi_name]['presente'] = True

            epis_ausentes_confirmados = [epi for epi, estado in estado_epi.items() if not estado['presente']]

            if epis_ausentes_confirmados:
                chave_alerta_atual = "-".join(sorted(epis_ausentes_confirmados))
                tempo_desde_ultimo_alerta = current_time - ultimo_alerta_enviado.get('timestamp', 0)

                if chave_alerta_atual != ultimo_alerta_enviado.get('chave') or tempo_desde_ultimo_alerta >= ALERT_COOLDOWN_SECONDS:
                    mensagem_alerta = f"‚ö†Ô∏è ALERTA: Pessoa detectada sem os seguintes EPIs: {', '.join(epis_ausentes_confirmados)}."
                    print(mensagem_alerta)

                    # Enviar para Firebase e obter buffer da imagem
                    buffer_imagem_alerta = enviar_alerta_firebase(db, frame, mensagem_alerta)

                    # Enviar para Telegram (texto e imagem se buffer existir)
                    enviar_notificacao_telegram(mensagem_alerta, buffer_imagem_alerta)

                    ultimo_alerta_enviado['chave'] = chave_alerta_atual
                    ultimo_alerta_enviado['timestamp'] = current_time
        else: # Nenhuma pessoa detectada, reseta estados de aus√™ncia
            for epi_name in EPIS_MONITORADOS:
                if estado_epi[epi_name]['ausente_desde'] is not None: # Se estava contando tempo de aus√™ncia
                     # Considera que o EPI voltou se a pessoa sumiu, para n√£o gerar alertas falsos depois
                    estado_epi[epi_name]['presente'] = True
                    estado_epi[epi_name]['ausente_desde'] = None
                    estado_epi[epi_name]['retorno_presenca'] = None


        # Exibir informa√ß√µes de FPS e contagem de objetos
        elapsed_time_total = time.time() - start_time
        fps_visual = inference_frame_count / elapsed_time_total if elapsed_time_total > 0 else 0
        cvzone.putTextRect(frame, f'FPS (Display): {fps_visual:.2f}', (10, 30), 1, 1)

        if total_inference_time > 0:
            fps_inference = inference_frame_count / total_inference_time
            cvzone.putTextRect(frame, f'FPS (Inference): {fps_inference:.2f}', (10, 60), 1, 1)

        y_offset = 90
        for label, count in detected_objects_count.items():
            cvzone.putTextRect(frame, f'{count} {label}', (10, y_offset), 1, 1)
            y_offset += 30

        cv2.imshow("Monitoramento de EPIs - Jupiter Supervision", frame)

        key = cv2.waitKey(1) & 0xFF
        if key == 27:  # ESC
            print("Tecla ESC pressionada. Encerrando...")
            break
        elif key == ord('q'): # Adiciona 'q' para sair tamb√©m
            print("Tecla 'q' pressionada. Encerrando...")
            break

    print("Finalizando programa...")
    vs.stop()
    cv2.destroyAllWindows()
    print("Programa encerrado.")
# --- Fim da Fun√ß√£o Principal ---

if __name__ == "__main__":
    print("Iniciando Sistema de Monitoramento de EPIs Jupiter Supervision...")
    main()